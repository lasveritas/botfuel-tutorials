'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var fsExtra = require('fs-extra');
var rp = require('request-promise-native');
var dir = require('node-dir');
var logger = require('logtown')('BotfuelNlu');
var BooleanExtractor = require('../extractors/boolean-extractor');
var LocationExtractor = require('../extractors/location-extractor');
var CompositeExtractor = require('../extractors/composite-extractor');
var AuthenticationError = require('../errors/authentication-error');
var SdkError = require('../errors/sdk-error');
var ClassificationResult = require('./classification-result');
var Nlu = require('./nlu');
var urlJoin = require('url-join');

var PROXY_HOST = process.env.BOTFUEL_PROXY_HOST || 'https://api.botfuel.io';
var SPELLCHECKING_ROUTE = '/nlp/spellchecking';
var SPELLCHECKING_VERSION = 'v1';

var SPELLCHECKING_API = process.env.BOTFUEL_SPELLCHECKING_API_URL || urlJoin(PROXY_HOST, SPELLCHECKING_ROUTE, SPELLCHECKING_VERSION);

/**
 * NLU using Botfuel Trainer API
 */

var BotfuelNlu = function (_Nlu) {
  _inherits(BotfuelNlu, _Nlu);

  /** @inheritdoc */
  function BotfuelNlu(config) {
    _classCallCheck(this, BotfuelNlu);

    logger.debug('constructor', config);

    var _this = _possibleConstructorReturn(this, (BotfuelNlu.__proto__ || Object.getPrototypeOf(BotfuelNlu)).call(this, config));

    _this.extractor = null;
    if (!process.env.BOTFUEL_APP_TOKEN) {
      throw new SdkError('BOTFUEL_APP_TOKEN is required for using the nlu service');
    }
    if (!process.env.BOTFUEL_APP_ID) {
      throw new SdkError('BOTFUEL_APP_ID is required for using the nlu service');
    }
    if (!process.env.BOTFUEL_APP_KEY) {
      throw new SdkError('BOTFUEL_APP_KEY is required for using the nlu service');
    }
    if (_this.config) {
      var classificationFilterPath = _this.config.path + '/src/classification-filter.js';
      if (fsExtra.pathExistsSync(classificationFilterPath)) {
        _this.classificationFilter = require(classificationFilterPath);
      }
    }
    return _this;
  }

  /**
   * Gets extractor files.
   * @param {String} path - extractors path
   * @returns {Array.<string>} - extractor files
   */


  _createClass(BotfuelNlu, [{
    key: 'getExtractorFiles',
    value: function getExtractorFiles(path) {
      var files = [];
      if (fs.existsSync(path)) {
        files = dir.files(path, { sync: true }) || files;
      }
      return files.filter(function (file) {
        return file.match(/^.*.js$/);
      });
    }

    /**
     * Gets extractors.
     * @param {String} path - extractors path
     * @returns {Array.<*>} - extractor instances
     */

  }, {
    key: 'getExtractors',
    value: function getExtractors(path) {
      // user extractors
      var extractors = this.getExtractorFiles(path).map(function (file) {
        var ExtractorConstructor = require(file);
        return new ExtractorConstructor(ExtractorConstructor.params);
      });
      // system extractors
      extractors.push(new BooleanExtractor({ locale: this.config.locale }));
      extractors.push(new LocationExtractor({}));
      return extractors;
    }

    /** @inheritdoc */

  }, {
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('init');
                _get(BotfuelNlu.prototype.__proto__ || Object.getPrototypeOf(BotfuelNlu.prototype), 'init', this).call(this);
                // Extractors
                this.extractor = new CompositeExtractor({
                  extractors: this.getExtractors(this.config.path + '/src/extractors')
                });

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /** @inheritdoc */

  }, {
    key: 'compute',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(sentence, context) {
        var messageEntities, trainerUrl, options, res, classificationResults;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('compute', sentence); // Context is not loggable
                // spellchecking
                // this is done outside the try/catch block to prevent catch-dialog to be triggered
                // if the error is not related to authentication
                _context2.next = 3;
                return this.spellcheck(sentence);

              case 3:
                sentence = _context2.sent;
                _context2.prev = 4;
                _context2.next = 7;
                return this.extractor.compute(sentence);

              case 7:
                messageEntities = _context2.sent;

                // computing intents
                trainerUrl = process.env.BOTFUEL_TRAINER_API_URL || 'https://api.botfuel.io/trainer/api/v0';

                if (trainerUrl.slice(-1) !== '/') {
                  trainerUrl += '/';
                }
                options = {
                  uri: trainerUrl + 'classify',
                  qs: {
                    sentence: sentence,
                    userId: context.userMessage.user
                  },
                  headers: {
                    'Botfuel-Bot-Id': process.env.BOTFUEL_APP_TOKEN,
                    'App-Id': process.env.BOTFUEL_APP_ID,
                    'App-Key': process.env.BOTFUEL_APP_KEY
                  },
                  json: true
                };
                _context2.next = 13;
                return rp(options);

              case 13:
                res = _context2.sent;
                classificationResults = res.map(function (data) {
                  return new ClassificationResult(data);
                });

                if (!this.classificationFilter) {
                  _context2.next = 20;
                  break;
                }

                _context2.next = 18;
                return this.classificationFilter(classificationResults, context);

              case 18:
                classificationResults = _context2.sent;

                classificationResults = classificationResults.slice(0, this.config.multiIntent ? 2 : 1);

              case 20:
                return _context2.abrupt('return', { messageEntities: messageEntities, classificationResults: classificationResults });

              case 23:
                _context2.prev = 23;
                _context2.t0 = _context2['catch'](4);

                logger.error('compute: error', _context2.t0.statusCode);

                if (!(_context2.t0.statusCode === 403)) {
                  _context2.next = 28;
                  break;
                }

                throw new AuthenticationError();

              case 28:
                throw _context2.t0;

              case 29:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[4, 23]]);
      }));

      function compute(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return compute;
    }()

    /**
     * Spellchecks a sentence.
     * @param sentence - a sentence
     * @returns the spellchecked sentence
     */

  }, {
    key: 'spellcheck',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(sentence) {
        var options, result;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.config.nlu.spellchecking) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt('return', sentence);

              case 2:

                if (typeof this.config.nlu.spellchecking === 'string') {
                  logger.warn('Using dictionary key as spellchecking configuration is deprecated. Set nlu.spellchecking to true to enable spellchecking or false to disable it.');
                }

                _context3.prev = 3;

                logger.debug('spellcheck', sentence);
                options = {
                  method: 'GET',
                  uri: SPELLCHECKING_API,
                  qs: {
                    sentence: sentence
                  },
                  rejectUnauthorized: false,
                  json: true,
                  headers: {
                    'App-Id': process.env.BOTFUEL_APP_ID,
                    'App-Key': process.env.BOTFUEL_APP_KEY,
                    'Botfuel-Bot-Id': process.env.BOTFUEL_APP_TOKEN
                  }
                };
                _context3.next = 8;
                return rp(_extends({}, options));

              case 8:
                result = _context3.sent;

                logger.debug('spellcheck: result', result);
                return _context3.abrupt('return', result.correctSentence);

              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3['catch'](3);

                logger.error('spellchecking: error', _context3.t0);

                if (!(_context3.t0.statusCode === 403)) {
                  _context3.next = 18;
                  break;
                }

                throw new AuthenticationError();

              case 18:
                return _context3.abrupt('return', sentence);

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[3, 13]]);
      }));

      function spellcheck(_x3) {
        return _ref3.apply(this, arguments);
      }

      return spellcheck;
    }()
  }]);

  return BotfuelNlu;
}(Nlu);

module.exports = BotfuelNlu;