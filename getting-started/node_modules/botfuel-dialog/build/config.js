'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var logger = require('logtown')('Config');
var LoggerManager = require('./logger-manager');
var ConfigurationError = require('./errors/configuration-error');

var defaultConfig = {
  adapter: {
    name: 'shell'
  },
  brain: {
    name: 'memory',
    conversationDuration: 86400000 // one day in ms
  },
  locale: 'en',
  logger: 'info',
  multiIntent: false,
  modules: [],
  nlu: {
    name: 'botfuel',
    spellchecking: false
  },
  path: process.cwd()
};

/**
 * Returns the contents of the bot config file.
 * @param configFileName - the bot config file name/path
 * @returns the contents of the bot config file
 */
var resolveConfigFile = function resolveConfigFile(configFileName) {
  // configure the logger with default configuration first the be able to log errors
  LoggerManager.configure(defaultConfig);
  if (!configFileName) {
    logger.info("You didn't specify any config file, using default config.");
    return {};
  }
  var configPath = path.resolve(process.cwd(), configFileName);
  try {
    return require(configPath);
  } catch (error) {
    if (error.code === 'MODULE_NOT_FOUND') {
      logger.error('Could not load config file ' + configPath);
    }
    throw error;
  }
};

var getComponentRoots = function getComponentRoots(config) {
  var botRoot = config.path + '/src';
  var sdkRoot = __dirname;
  var moduleRoots = config.modules.map(function (packageName) {
    if (typeof packageName !== 'string') {
      throw new ConfigurationError('Parameter "modules" of configuration should be a list of package names.');
    }
    var moduleBasePath = path.dirname(require.resolve(packageName));

    var _require = require(packageName),
        botfuelModuleRoot = _require.botfuelModuleRoot;

    if (typeof botfuelModuleRoot !== 'string') {
      throw new ConfigurationError('Package ' + packageName + ' should export "botfuelModuleRoot" with type string.');
    }
    var absolutePath = path.join(moduleBasePath, botfuelModuleRoot);
    if (!fs.existsSync(absolutePath)) {
      throw new ConfigurationError('Package ' + packageName + ' does not contain the directory "' + absolutePath + '".');
    }
    return absolutePath;
  });
  return [botRoot].concat(_toConsumableArray(moduleRoots), [sdkRoot]);
};

/**
 * Merges the given configuration with the default configuration.
 * @param botConfig - the bot config
 * @returns the configuration
 */
var getConfiguration = function getConfiguration() {
  var botConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // get the config by extending defaultConfig with botConfig
  var config = _.merge(defaultConfig, botConfig);
  config.componentRoots = getComponentRoots(config);
  // reconfigure the logger with the final config
  LoggerManager.configure(config);
  // return default config extended by bot config
  return config;
};

module.exports = {
  defaultConfig: defaultConfig,
  resolveConfigFile: resolveConfigFile,
  getConfiguration: getConfiguration
};