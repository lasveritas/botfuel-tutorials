'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _ = require('lodash');
var logger = require('logtown')('Dialog');
var kebabCase = require('lodash/kebabCase');
var ViewResolver = require('../view-resolver');
var MissingImplementationError = require('../errors/missing-implementation-error');
var SdkError = require('../errors/sdk-error');
var DialogError = require('../errors/dialog-error');

// TODO: Remove duplication of magic codes

/**
 * A dialog is responsible for calling its associated view with the right parameters.
 *
 * The dialog and its associated view share the same name.
 * The dialog optionally accesses the brain and
 * then calls the view with the right parameters for the rendering.
 * At the end of the execution, an object is returned which contains
 * either the new status of the dialog or or a new dialog to execute.
 */
var Dialog = function () {

  /*
   * @param {Object} characteristics - the characteristics of the dialog
   * @param {Object} [parameters={}] - the optional dialog parameters
   */
  function Dialog(bot) {
    var characteristics = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { reentrant: false };
    var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Dialog);

    logger.debug('constructor', { parameters: parameters });
    var config = bot.config,
        brain = bot.brain;

    this.brain = brain;
    this.characteristics = characteristics;
    this.parameters = parameters;
    this.viewResolver = new ViewResolver(config);
    this.name = this.getName();
    this.config = config.custom;
  }

  /**
   * Gets the dialog name.
   */


  _createClass(Dialog, [{
    key: 'getName',
    value: function getName() {
      return kebabCase(this.constructor.name).replace(/(dialog|-dialog)/g, ''); // TODO: is this correct?
    }

    /*
     * Display messages by resolving the view associated to the dialog.
     * @param {Object} [data] - data used at display time
     * @returns {Promise.<void>}
     */

  }, {
    key: 'display',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userMessage, data) {
        var botMessages;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('display', { userMessage: userMessage, data: data });
                botMessages = this.viewResolver.resolve(this.name).renderAsJson(userMessage, data);
                return _context.abrupt('return', botMessages);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function display(_x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return display;
    }()

    /**
     * Executes the dialog.
     * @abstract
     * @param userMessage - the user message
     * @param data - the data
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'execute',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userMessage, data) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new MissingImplementationError();

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function execute(_x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return execute;
    }()

    /**
     * Builds an action.
     * indicating that the current dialog is completed and
     * providing the name of the next dialog to execute.
     * @param name - the name of the next dialog to execute
     * @param data - the data for the next dialog
     */

  }, {
    key: 'triggerNext',
    value: function triggerNext(name) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!name) {
        throw new DialogError({
          message: 'You must provide a dialogName as a parameter to the nextDialog method.'
        });
      }
      return {
        newDialog: {
          name: name,
          data: data
        },
        name: Dialog.ACTION_NEXT
      };
    }

    /**
     * Builds an action.
     * indicating that the previous dialog is canceled and
     * optionally providing the name of the next dialog.
     * @param name - the name of the next dialog (optional)
     */

  }, {
    key: 'cancelPrevious',
    value: function cancelPrevious(name) {
      if (name) {
        return {
          name: Dialog.ACTION_CANCEL,
          newDialog: {
            name: name,
            data: {}
          }
        };
      }
      return {
        name: Dialog.ACTION_CANCEL
      };
    }

    /**
     * Builds an action.
     * indicating that a new conversation should be started and
     * optionally providing the name of the next dialog.
     * @param name - the name of the next dialog (optional)
     * @param {Object} [data] - the data for the next dialog
     * @returns {Object} the action object
     */

  }, {
    key: 'startNewConversation',
    value: function startNewConversation(name) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (name) {
        return {
          name: Dialog.ACTION_NEW_CONVERSATION,
          newDialog: {
            name: name,
            data: data
          }
        };
      }
      return {
        name: Dialog.ACTION_NEW_CONVERSATION
      };
    }

    /*
     * Build an action
     * indicating that the current dialog is completed.
     */

  }, {
    key: 'complete',
    value: function complete() {
      return {
        name: Dialog.ACTION_COMPLETE
      };
    }

    /**
     * Builds an action.
     * indicating that current dialog should wait.
     */

  }, {
    key: 'wait',
    value: function wait() {
      return {
        name: Dialog.ACTION_WAIT
      };
    }

    /**
     * Hook to be overridden before dialog displays.
     * Returns null by default.
     * @param {Object} [userMessage] - the user message
     * @param {Object} data - the data
     * @returns - the extra data which will be added to the data passed to the view
     */

  }, {
    key: 'dialogWillDisplay',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessage, data) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('dialogWillDisplay', { userMessage: userMessage, data: data });
                return _context3.abrupt('return', null);

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function dialogWillDisplay(_x9, _x10) {
        return _ref3.apply(this, arguments);
      }

      return dialogWillDisplay;
    }()

    /**
     * Merges extraData to data if extraData is an object.
     * If extraData is a value then extend data with key "extraData".
     * @param extraData - the extra data
     * @param data - the data
     * @returns - the data with extraData combined
     */

  }, {
    key: 'mergeData',
    value: function mergeData(extraData, data) {
      // if extraData is null
      if (!extraData) {
        return data;
      }
      // if extraData is an object
      if ((typeof extraData === 'undefined' ? 'undefined' : _typeof(extraData)) === 'object' && !Array.isArray(extraData)) {
        if (data) {
          var commonKeys = _.intersection(Object.keys(data), Object.keys(extraData));
          if (commonKeys.length > 0) {
            throw new SdkError('Your extraData contains keys already defined in the dialog data: ' + commonKeys.toString());
          }
        }
        return _extends({}, data, extraData);
      }
      // if extraData is a value
      return _extends({}, data, { extraData: extraData });
    }

    /**
     * Hook to be overridden before dialog completes.
     * @param userMessage - the user message
     * @param data - the data passed to the view
     */

  }, {
    key: 'dialogWillComplete',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userMessage, data) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('dialogWillComplete', { userMessage: userMessage, data: data });
                return _context4.abrupt('return', this.complete());

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function dialogWillComplete(_x11, _x12) {
        return _ref4.apply(this, arguments);
      }

      return dialogWillComplete;
    }()
  }]);

  return Dialog;
}();

Dialog.ACTION_CANCEL = 'cancel';
Dialog.ACTION_COMPLETE = 'complete';
Dialog.ACTION_WAIT = 'wait';
Dialog.ACTION_NEXT = 'next';
Dialog.ACTION_NEW_CONVERSATION = 'new_conversation';


module.exports = Dialog;