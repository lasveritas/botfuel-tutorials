'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var readline = require('readline');
var chalk = require('chalk');
var logger = require('logtown')('ShellAdapter');
var uuidv4 = require('uuid/v4');
var UserTextMessage = require('../messages/user-text-message');
var PostbackMessage = require('../messages/postback-message');
var Adapter = require('./adapter');

var DELIMITER = '' + chalk.bold('> ');

/**
 * Shell adapter.
 * @extends Adapter
 */

var ShellAdapter = function (_Adapter) {
  _inherits(ShellAdapter, _Adapter);

  /**
   * @constructor
   * @param {Object} bot - the bot
   */
  function ShellAdapter(bot) {
    _classCallCheck(this, ShellAdapter);

    var _this = _possibleConstructorReturn(this, (ShellAdapter.__proto__ || Object.getPrototypeOf(ShellAdapter)).call(this, bot));

    _this.userId = uuidv4();
    _this.botTextColor = '#16a085';
    _this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return _this;
  }

  // eslint-disable-next-line require-jsdoc


  _createClass(ShellAdapter, [{
    key: 'run',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('run');
                this.rl.on('line', function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(input) {
                    var userMessage;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            userMessage = new UserTextMessage(input).toJson(_this2.userId);
                            _context.next = 3;
                            return _this2.handleMessage(userMessage);

                          case 3:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this2);
                  }));

                  return function (_x) {
                    return _ref2.apply(this, arguments);
                  };
                }());

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()

    /* eslint-disable no-console */
    /** @inheritDoc */

  }, {
    key: 'sendMessage',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(botMessage) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(botMessage.type === 'actions')) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 3;
                return this.sendActionsMessage(botMessage);

              case 3:
                _context3.next = 6;
                break;

              case 5:
                console.log(chalk.hex(this.botTextColor)('' + DELIMITER + botMessage.payload.value));

              case 6:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sendMessage(_x2) {
        return _ref3.apply(this, arguments);
      }

      return sendMessage;
    }()

    /**
     * Send actions message
     * @param {Object} actionsMessage actionMessage
     * @returns {Promise.<void>}
     */

  }, {
    key: 'sendActionsMessage',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(actionsMessage) {
        var _this3 = this;

        var actions, str;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                actions = actionsMessage.payload.value;
                str = 'Please select:\n';

                actions.forEach(function (action, index) {
                  str += index + 1 + ': (' + action.type + ') ' + action.text + '\n';
                });

                this.rl.question(chalk.hex(this.botTextColor)(str), function () {
                  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(answer) {
                    var id, selected, userMessage;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            id = parseInt(answer, 10);

                            if (!(id >= 1 && id <= actions.length)) {
                              _context4.next = 12;
                              break;
                            }

                            selected = actions[id - 1];
                            // postback

                            if (!(selected.type === 'postback')) {
                              _context4.next = 9;
                              break;
                            }

                            userMessage = new PostbackMessage({
                              name: selected.value.name,
                              data: selected.value.data
                            }).toJson(_this3.userId);
                            _context4.next = 7;
                            return _this3.handleMessage(userMessage);

                          case 7:
                            _context4.next = 10;
                            break;

                          case 9:
                            if (selected.type === 'link') {
                              console.log(chalk.hex(_this3.botTextColor)('open link: ' + selected.value));
                            }

                          case 10:
                            _context4.next = 13;
                            break;

                          case 12:
                            console.log(chalk.red('Invalid choice!'));

                          case 13:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this3);
                  }));

                  return function (_x4) {
                    return _ref5.apply(this, arguments);
                  };
                }());

              case 4:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sendActionsMessage(_x3) {
        return _ref4.apply(this, arguments);
      }

      return sendActionsMessage;
    }()
  }]);

  return ShellAdapter;
}(Adapter);

module.exports = ShellAdapter;