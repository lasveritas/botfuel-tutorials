'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var uuidv4 = require('uuid/v4'); /**
                                  * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
                                  *
                                  * Licensed under the Apache License, Version 2.0 (the "License");
                                  * you may not use this file except in compliance with the License.
                                  * You may obtain a copy of the License at
                                  *
                                  * http://www.apache.org/licenses/LICENSE-2.0
                                  *
                                  * Unless required by applicable law or agreed to in writing, software
                                  * distributed under the License is distributed on an "AS IS" BASIS,
                                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                  * See the License for the specific language governing permissions and
                                  * limitations under the License.
                                  */

var logger = require('logtown')('Adapter');
var MissingImplementationError = require('../errors/missing-implementation-error');

/**
 * An adapter adapts the messages to the messaging platform.
 */

var Adapter = function () {
  function Adapter(bot) {
    _classCallCheck(this, Adapter);

    logger.debug('constructor');
    this.bot = bot;
  }

  /**
   * Plays some user messages.
   * This adapter is only implemented by the {@link TestAdapter}.
   * This method is called by the {@link Bot}'s play method.
   * @abstract
   */


  _createClass(Adapter, [{
    key: 'play',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userMessages) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('play', userMessages);
                throw new MissingImplementationError();

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function play(_x) {
        return _ref.apply(this, arguments);
      }

      return play;
    }()

    /**
     * Adapter's method for running the bot.
     * This method is called by the {@link Bot}'s run method.
     * @abstract
     */

  }, {
    key: 'run',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('run');
                throw new MissingImplementationError();

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Handles a user message.
     */

  }, {
    key: 'handleMessage',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessage) {
        var botMessages, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, botMessage, extendedBotMessage;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('handleMessage', userMessage);
                _context3.next = 3;
                return this.addUserIfNecessary(userMessage.user);

              case 3:
                _context3.next = 5;
                return this.bot.handleMessage(this.extendMessage(userMessage));

              case 5:
                botMessages = _context3.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 9;
                _iterator = botMessages[Symbol.iterator]();

              case 11:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context3.next = 19;
                  break;
                }

                botMessage = _step.value;

                // TODO: Remove this ugly line
                extendedBotMessage = this.extendMessage(botMessage);

                // eslint-disable-next-line no-await-in-loop

                _context3.next = 16;
                return this.sendMessage(extendedBotMessage);

              case 16:
                _iteratorNormalCompletion = true;
                _context3.next = 11;
                break;

              case 19:
                _context3.next = 25;
                break;

              case 21:
                _context3.prev = 21;
                _context3.t0 = _context3['catch'](9);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 25:
                _context3.prev = 25;
                _context3.prev = 26;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 28:
                _context3.prev = 28;

                if (!_didIteratorError) {
                  _context3.next = 31;
                  break;
                }

                throw _iteratorError;

              case 31:
                return _context3.finish(28);

              case 32:
                return _context3.finish(25);

              case 33:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[9, 21, 25, 33], [26,, 28, 32]]);
      }));

      function handleMessage(_x2) {
        return _ref3.apply(this, arguments);
      }

      return handleMessage;
    }()

    /**
     * Adds the user if necessary.
     * Calls the corresponding method of the brain.
     * Adapters can add specific behaviour.
     */

  }, {
    key: 'addUserIfNecessary',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userId) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('addUserIfNecessary', userId);
                _context4.next = 3;
                return this.bot.brain.addUserIfNecessary(userId);

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addUserIfNecessary(_x3) {
        return _ref4.apply(this, arguments);
      }

      return addUserIfNecessary;
    }()

    /**
     * Sends a single bot message to the messaging platform.
     * @abstract
     */

  }, {
    key: 'sendMessage',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(botMessage) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('sendMessage', botMessage);
                throw new MissingImplementationError();

              case 2:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sendMessage(_x4) {
        return _ref5.apply(this, arguments);
      }

      return sendMessage;
    }()

    /**
     * Extend a message with extra properties
     * @param {Object} message - bot or user message
     * @returns {Object} the message extended with properties
     */

  }, {
    key: 'extendMessage',
    value: function extendMessage(message) {
      logger.debug('extendMessage', message);

      // $FlowFixMe
      return _extends({}, message, {
        id: this.getMessageUUID(),
        timestamp: this.getMessageTimestamp()
      });
    }
    /**
     * Generates an uuid
     */

  }, {
    key: 'getMessageUUID',
    value: function getMessageUUID() {
      logger.debug('getMessageUUID');
      return uuidv4();
    }

    /**
     * Generates a timestamp.
     */

  }, {
    key: 'getMessageTimestamp',
    value: function getMessageTimestamp() {
      logger.debug('getMessageTimestamp');
      return Date.now();
    }
  }]);

  return Adapter;
}();

module.exports = Adapter;