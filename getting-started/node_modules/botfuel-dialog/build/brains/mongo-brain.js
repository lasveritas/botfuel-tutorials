'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _require = require('mongodb'),
    MongoClient = _require.MongoClient;

var logger = require('logtown')('MongoBrain');
var MissingCredentialsError = require('../errors/missing-credentials-error');
var Brain = require('./brain');

/**
 * Brain with MongoDB storage.
 */

var MongoBrain = function (_Brain) {
  _inherits(MongoBrain, _Brain);

  /** @inheritdoc */
  function MongoBrain(config) {
    _classCallCheck(this, MongoBrain);

    logger.debug('constructor');
    return _possibleConstructorReturn(this, (MongoBrain.__proto__ || Object.getPrototypeOf(MongoBrain)).call(this, config));
  }

  /** @inheritdoc */


  _createClass(MongoBrain, [{
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('init');
                _context.next = 3;
                return MongoClient.connect(this.getMongoDbUri());

              case 3:
                this.db = _context.sent;

                this.users = this.db.collection('users');
                this.global = this.db.collection('global');
                // ensure userId uniqueness
                this.users.ensureIndex({ _userId: 1 }, { unique: true });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /**
     * Returns the mongoDB connection URI.
     * @async
     * @private
     * @param {Object} userMessage - the user text message
     * @returns {Promise.<void>}
     */

  }, {
    key: 'getMongoDbUri',
    value: function getMongoDbUri() {
      if (process.env.MONGODB_URI) {
        return process.env.MONGODB_URI;
      }
      if (!process.env.BOTFUEL_APP_TOKEN) {
        throw new MissingCredentialsError('Either MONGODB_URI or BOTFUEL_APP_TOKEN is required to use the Brain with mongodb.');
      }
      return 'mongodb://localhost/botfuel-bot-' + process.env.BOTFUEL_APP_TOKEN;
    }

    /** @inheritdoc */

  }, {
    key: 'clean',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('clean');
                _context2.next = 3;
                return this.global.deleteMany();

              case 3:
                _context2.next = 5;
                return this.users.deleteMany();

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function clean() {
        return _ref2.apply(this, arguments);
      }

      return clean;
    }()

    /** @inheritdoc */

  }, {
    key: 'hasUser',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userId) {
        var user;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('hasUser', userId);
                _context3.next = 3;
                return this.users.findOne({ _userId: userId });

              case 3:
                user = _context3.sent;
                return _context3.abrupt('return', user !== null);

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function hasUser(_x) {
        return _ref3.apply(this, arguments);
      }

      return hasUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'addUser',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userId) {
        var newUser, result;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('addUser', userId);
                newUser = this.getUserInitValue(userId);
                _context4.prev = 2;
                _context4.next = 5;
                return this.users.insertOne(newUser);

              case 5:
                result = _context4.sent;
                return _context4.abrupt('return', result.ops[0]);

              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4['catch'](2);

                if (!(_context4.t0.code === 11000)) {
                  _context4.next = 13;
                  break;
                }

                throw new Error('This user already exists');

              case 13:
                throw _context4.t0;

              case 14:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 9]]);
      }));

      function addUser(_x2) {
        return _ref4.apply(this, arguments);
      }

      return addUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'getUser',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(userId) {
        var _users;

        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        var user;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('getUser', userId);
                _context5.next = 3;
                return (_users = this.users).findOne.apply(_users, [{ _userId: userId }].concat(params));

              case 3:
                user = _context5.sent;

                if (user) {
                  _context5.next = 6;
                  break;
                }

                throw new Error('User does not exist');

              case 6:
                return _context5.abrupt('return', user);

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getUser(_x3) {
        return _ref5.apply(this, arguments);
      }

      return getUser;
    }()

    /** @inheritdoc */

  }, {
    key: 'getAllUsers',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                logger.debug('getAllUsers');
                return _context6.abrupt('return', this.users.find().toArray());

              case 2:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getAllUsers() {
        return _ref6.apply(this, arguments);
      }

      return getAllUsers;
    }()

    /**
     * Wraps mongodb findOneAndUpdate and throws if user does not exist
     * @async
     * @abstract
     * @param {String} userId - user id
     * @returns {Promise.<Object>} the user
     */

  }, {
    key: 'findUserAndUpdate',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var _users2;

        var user,
            _args7 = arguments;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (_users2 = this.users).findOneAndUpdate.apply(_users2, _args7);

              case 2:
                user = _context7.sent;

                if (user) {
                  _context7.next = 5;
                  break;
                }

                throw new Error('User does not exist');

              case 5:
                return _context7.abrupt('return', user);

              case 6:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function findUserAndUpdate() {
        return _ref7.apply(this, arguments);
      }

      return findUserAndUpdate;
    }()

    /** @inheritdoc */

  }, {
    key: 'userSet',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(userId, key, value) {
        var result;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                logger.debug('userSet', userId, key, value);
                _context8.next = 3;
                return this.findUserAndUpdate({ _userId: userId }, { $set: _defineProperty({}, key, value) }, { returnOriginal: false });

              case 3:
                result = _context8.sent;
                return _context8.abrupt('return', result.value);

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function userSet(_x4, _x5, _x6) {
        return _ref8.apply(this, arguments);
      }

      return userSet;
    }()

    /** @inheritdoc */

  }, {
    key: 'fetchLastConversation',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(userId) {
        var user, conversation;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                logger.debug('fetchLastConversation', userId);
                _context9.next = 3;
                return this.getUser(userId, { _conversations: { $slice: 1 } });

              case 3:
                user = _context9.sent;
                conversation = user._conversations[0];
                return _context9.abrupt('return', this.isConversationValid(conversation) ? conversation : this.addConversation(userId));

              case 6:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function fetchLastConversation(_x7) {
        return _ref9.apply(this, arguments);
      }

      return fetchLastConversation;
    }()

    /** @inheritdoc */

  }, {
    key: 'addConversation',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(userId) {
        var conversation, result;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                logger.debug('addConversation', userId);
                conversation = this.getConversationInitValue();
                _context10.next = 4;
                return this.findUserAndUpdate({ _userId: userId }, { $push: { _conversations: { $each: [conversation], $position: 0 } } }, { returnOriginal: false });

              case 4:
                result = _context10.sent;
                return _context10.abrupt('return', result.value._conversations[0]);

              case 6:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function addConversation(_x8) {
        return _ref10.apply(this, arguments);
      }

      return addConversation;
    }()

    /** @inheritdoc */

  }, {
    key: 'conversationSet',
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(userId, key, value) {
        var result;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                logger.debug('conversationSet', userId, key, value);
                _context11.next = 3;
                return this.findUserAndUpdate({ _userId: userId }, { $set: _defineProperty({}, '_conversations.0.' + key, value) }, { returnOriginal: false, sort: { '_conversations._createdAt': -1 } });

              case 3:
                result = _context11.sent;
                return _context11.abrupt('return', result.value._conversations[0]);

              case 5:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function conversationSet(_x9, _x10, _x11) {
        return _ref11.apply(this, arguments);
      }

      return conversationSet;
    }()

    /**
     * Drops the database (used by tests).
     * @async
     * @returns {Promise.<void>}
     */

  }, {
    key: 'dropDatabase',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                logger.debug('dropDatabase');
                _context12.next = 3;
                return this.db.dropDatabase();

              case 3:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function dropDatabase() {
        return _ref12.apply(this, arguments);
      }

      return dropDatabase;
    }()

    /** @inheritdoc */

  }, {
    key: 'botGet',
    value: function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(key) {
        var global;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.global.findOne({});

              case 2:
                global = _context13.sent;
                return _context13.abrupt('return', global[key]);

              case 4:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function botGet(_x12) {
        return _ref13.apply(this, arguments);
      }

      return botGet;
    }()

    /** @inheritdoc */

  }, {
    key: 'botSet',
    value: function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(key, value) {
        var global;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.global.findOneAndUpdate({}, {
                  $set: _defineProperty({}, key, value)
                }, {
                  upsert: true
                });

              case 2:
                global = _context14.sent;
                return _context14.abrupt('return', global[key]);

              case 4:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function botSet(_x13, _x14) {
        return _ref14.apply(this, arguments);
      }

      return botSet;
    }()
  }]);

  return MongoBrain;
}(Brain);

module.exports = MongoBrain;