'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Logger = require('logtown');
var AdapterResolver = require('./adapter-resolver');
var BrainResolver = require('./brain-resolver');
var NluResolver = require('./nlu-resolver');
var DialogManager = require('./dialog-manager');

var _require = require('./config'),
    getConfiguration = _require.getConfiguration;

var AuthenticationError = require('./errors/authentication-error');
var DialogError = require('./errors/dialog-error');
var ResolutionError = require('./errors/resolution-error');

var _require2 = require('./utils/environment'),
    checkCredentials = _require2.checkCredentials;

var MiddlewareManager = require('./middleware-manager');

var logger = Logger.getLogger('Bot');

/**
 * This is the bot main class that ties all the components together.
 *
 * A bot has :
 * - an {@link Adapter},
 * - a {@link Brain},
 * - a {@link Config},
 * - a {@link DialogManager},
 * - a {@link MiddlewareManager},
 * - a {@link Nlu} (Natural Language Understanding) module.
 */

var Bot = function () {
  function Bot(config) {
    _classCallCheck(this, Bot);

    logger.debug('constructor', { config: config });
    this.config = getConfiguration(config);
    logger.debug('constructor', { config: this.config });
    checkCredentials(this.config);
    this.brain = new BrainResolver(this).resolve(this.config.brain.name);
    this.nlu = new NluResolver(this).resolve(this.config.nlu.name);
    this.dm = new DialogManager(this);
    this.adapter = new AdapterResolver(this).resolve(this.config.adapter.name);
    this.middlewareManager = new MiddlewareManager(this);
  }

  /**
   * Initializes the bot.
   * @private
   */


  _createClass(Bot, [{
    key: 'init',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('init');
                _context.next = 3;
                return this.brain.init();

              case 3:
                _context.next = 5;
                return this.nlu.init();

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /**
     * Runs the bot.
     */

  }, {
    key: 'run',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('run');
                _context2.next = 3;
                return this.init();

              case 3:
                _context2.next = 5;
                return this.adapter.run();

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()

    /**
     * Plays user messages (only available with the TestAdapter).
     */

  }, {
    key: 'play',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessages) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('play', { userMessages: userMessages });
                _context3.next = 3;
                return this.init();

              case 3:
                _context3.next = 5;
                return this.adapter.play(userMessages);

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function play(_x) {
        return _ref3.apply(this, arguments);
      }

      return play;
    }()

    /**
     * Cleans the bot brain.
     */

  }, {
    key: 'clean',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('clean');
                _context4.next = 3;
                return this.brain.init();

              case 3:
                _context4.next = 5;
                return this.brain.clean();

              case 5:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function clean() {
        return _ref4.apply(this, arguments);
      }

      return clean;
    }()

    /**
     * Handles a user message.
     */

  }, {
    key: 'handleMessage',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(userMessage) {
        var _this = this;

        var contextIn, botMessages, contextOut;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                logger.debug('handleMessage', { userMessage: userMessage });
                _context7.prev = 1;
                contextIn = {
                  user: userMessage.user,
                  brain: this.brain,
                  userMessage: userMessage,
                  config: this.config
                };
                botMessages = [];
                _context7.next = 6;
                return this.middlewareManager.in(contextIn, _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          logger.debug('handleMessage: responding');
                          _context5.next = 3;
                          return _this.respond(userMessage);

                        case 3:
                          botMessages = _context5.sent;

                        case 4:
                        case 'end':
                          return _context5.stop();
                      }
                    }
                  }, _callee5, _this);
                })));

              case 6:
                contextOut = {
                  user: userMessage.user,
                  brain: this.brain,
                  botMessages: botMessages,
                  config: this.config,
                  userMessage: userMessage
                };
                _context7.next = 9;
                return this.middlewareManager.out(contextOut, _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                        case 'end':
                          return _context6.stop();
                      }
                    }
                  }, _callee6, _this);
                })));

              case 9:
                return _context7.abrupt('return', botMessages);

              case 12:
                _context7.prev = 12;
                _context7.t0 = _context7['catch'](1);

                logger.debug('handleMessage: catching', { error: _context7.t0 });
                return _context7.abrupt('return', this.respondWhenError(userMessage, _context7.t0));

              case 16:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this, [[1, 12]]);
      }));

      function handleMessage(_x2) {
        return _ref5.apply(this, arguments);
      }

      return handleMessage;
    }()

    /**
     * Responds to the user.
     */

  }, {
    key: 'respond',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(userMessage) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                logger.debug('respond', { userMessage: userMessage });
                _context8.t0 = userMessage.type;
                _context8.next = _context8.t0 === 'postback' ? 4 : _context8.t0 === 'image' ? 5 : _context8.t0 === 'file' ? 6 : _context8.t0 === 'text' ? 7 : 7;
                break;

              case 4:
                return _context8.abrupt('return', this.respondWhenPostback(userMessage));

              case 5:
                return _context8.abrupt('return', this.respondWhenImage(userMessage));

              case 6:
                return _context8.abrupt('return', this.respondWhenFile(userMessage));

              case 7:
                return _context8.abrupt('return', this.respondWhenText(userMessage));

              case 8:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function respond(_x3) {
        return _ref8.apply(this, arguments);
      }

      return respond;
    }()

    /**
     * Computes the responses for a user message of type text.
     * @private
     */

  }, {
    key: 'respondWhenText',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(userMessage) {
        var complexInputDialog, _ref10, classificationResults, messageEntities;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                logger.debug('respondWhenText', { userMessage: userMessage });
                // If text input is too long then trigger the complex-input dialog

                if (!(userMessage.payload.value.length > 256)) {
                  _context9.next = 5;
                  break;
                }

                logger.error('respondWhenText: input is too long.');
                complexInputDialog = {
                  name: 'complex-input',
                  data: {}
                };
                return _context9.abrupt('return', this.dm.executeDialog(userMessage, complexInputDialog));

              case 5:
                _context9.next = 7;
                return this.nlu.compute(userMessage.payload.value, {
                  brain: this.brain,
                  userMessage: userMessage
                });

              case 7:
                _ref10 = _context9.sent;
                classificationResults = _ref10.classificationResults;
                messageEntities = _ref10.messageEntities;

                logger.debug('respondWhenText: classificationResults', classificationResults, messageEntities);
                return _context9.abrupt('return', this.dm.executeClassificationResults(userMessage, classificationResults, messageEntities));

              case 12:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function respondWhenText(_x4) {
        return _ref9.apply(this, arguments);
      }

      return respondWhenText;
    }()

    /**
     * Computes the responses for a user message of type postback.
     * @private
     */

  }, {
    key: 'respondWhenPostback',
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(userMessage) {
        var dialog;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                logger.debug('respondWhenPostback', { userMessage: userMessage });
                dialog = {
                  name: userMessage.payload.value.name,
                  data: {
                    messageEntities: userMessage.payload.value.data.messageEntities
                  }
                };
                return _context10.abrupt('return', this.dm.executeDialog(userMessage, dialog));

              case 3:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function respondWhenPostback(_x5) {
        return _ref11.apply(this, arguments);
      }

      return respondWhenPostback;
    }()

    /**
     * Computes the responses for a user message of type image.
     * @private
     */

  }, {
    key: 'respondWhenImage',
    value: function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(userMessage) {
        var dialog;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                logger.debug('respondWhenImage', { userMessage: userMessage });
                dialog = {
                  name: 'image',
                  data: {
                    url: userMessage.payload.value
                  }
                };
                return _context11.abrupt('return', this.dm.executeDialog(userMessage, dialog));

              case 3:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function respondWhenImage(_x6) {
        return _ref12.apply(this, arguments);
      }

      return respondWhenImage;
    }()

    /**
     * Computes the responses for a user message of type file.
     * @private
     */

  }, {
    key: 'respondWhenFile',
    value: function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(userMessage) {
        var dialog;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                logger.debug('respondWhenFile', { userMessage: userMessage });
                dialog = {
                  name: 'file',
                  data: {
                    url: userMessage.payload.value
                  }
                };
                return _context12.abrupt('return', this.dm.executeDialog(userMessage, dialog));

              case 3:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function respondWhenFile(_x7) {
        return _ref13.apply(this, arguments);
      }

      return respondWhenFile;
    }()
  }, {
    key: 'respondWhenError',
    value: function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(userMessage, error) {
        var keys, errorObject, catchDialog;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                logger.debug('respondWhenError', { userMessage: userMessage, error: error });
                if (error instanceof AuthenticationError) {
                  logger.error('Botfuel API authentication failed!');
                  logger.error('Please check your app’s credentials and that its plan limits haven’t been reached on https://api.botfuel.io');
                } else if (error instanceof ResolutionError) {
                  logger.error('Could not resolve \'' + error.name + '\'');
                } else if (error instanceof DialogError) {
                  logger.error('Could not execute dialog \'' + error.name + '\'');
                }
                keys = Object.getOwnPropertyNames(error);
                // error is not a standard JS Object so we have to copy each property
                // one by one

                errorObject = keys.reduce(function (obj, key) {
                  return _extends({}, obj, _defineProperty({}, key, error[key]));
                }, {});
                catchDialog = {
                  name: 'catch',
                  data: {
                    error: errorObject
                  }
                };
                return _context13.abrupt('return', this.dm.executeDialog(userMessage, catchDialog));

              case 6:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function respondWhenError(_x8, _x9) {
        return _ref14.apply(this, arguments);
      }

      return respondWhenError;
    }()
  }]);

  return Bot;
}();

module.exports = Bot;