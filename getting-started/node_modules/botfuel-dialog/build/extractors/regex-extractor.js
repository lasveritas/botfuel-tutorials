'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('RegexExtractor');
var ExtractorError = require('../errors/extractor-error');
var Extractor = require('./extractor');

/**
 * Entity extraction regex based extractor.
 */

var RegexExtractor = function (_Extractor) {
  _inherits(RegexExtractor, _Extractor);

  /**
   * @constructor
   * @param {Object} parameters - the extractor parameters
   */
  function RegexExtractor(parameters) {
    _classCallCheck(this, RegexExtractor);

    if (!RegexExtractor.hasValidPattern(parameters.regex)) {
      throw new ExtractorError('the "regex" parameter can\'t be "' + parameters.regex + '"');
    }
    return _possibleConstructorReturn(this, (RegexExtractor.__proto__ || Object.getPrototypeOf(RegexExtractor)).call(this, parameters));
  }

  /** @inheritDoc */


  _createClass(RegexExtractor, [{
    key: 'compute',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sentence) {
        var regex, entities, match;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('compute', sentence);
                // ensure regex has global flag to find all matches
                regex = RegexExtractor.ensureGlobalRegex(this.parameters.regex);
                entities = [];
                match = void 0;
                /* eslint-disable no-cond-assign */

                while (match = regex.exec(sentence)) {
                  entities.push({
                    dim: this.parameters.dimension,
                    body: match[0],
                    values: [this.buildValue(match)],
                    start: match.index,
                    end: match.index + match[0].length
                  });
                }
                /* eslint-enable no-cond-assign */
                return _context.abrupt('return', entities);

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function compute(_x) {
        return _ref.apply(this, arguments);
      }

      return compute;
    }()

    /**
     * Builds the object value from a match.
     * @param {Object} value - the match
     * @returns {Object} the object value
     */

  }, {
    key: 'buildValue',
    value: function buildValue(value) {
      return { value: value[0] };
    }

    /**
     * Ensures the regex have the global flag
     * @static
     * @param {RegExp|*} pattern - the regexp pattern
     * @returns {RegExp} the regexp with the global flag
     */

  }], [{
    key: 'ensureGlobalRegex',
    value: function ensureGlobalRegex(pattern) {
      var parts = pattern.toString().split('/');
      var regex = parts.length > 1 ? parts[1] : pattern;
      var flags = parts.length > 1 ? parts[2] : '';
      try {
        return new RegExp(regex, flags.indexOf('g') === -1 ? 'g' + flags : flags);
      } catch (e) {
        throw new ExtractorError(e.message);
      }
    }

    /**
     * Checks if the regexp has a valid pattern
     * @static
     * @param {RegExp|*} regexp - the regexp pattern
     * @returns {boolean} true if pattern is valid
     */

  }, {
    key: 'hasValidPattern',
    value: function hasValidPattern(regexp) {
      var exclusions = [undefined, null, ''];
      return exclusions.indexOf(regexp) === -1;
    }
  }]);

  return RegexExtractor;
}(Extractor);

module.exports = RegexExtractor;