'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromiseNative = require('request-promise-native');

var _requestPromiseNative2 = _interopRequireDefault(_requestPromiseNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var _require = require('lodash'),
    clone = _require.clone,
    extend = _require.extend;

var logger = require('logtown')('WsExtractor');
var AuthenticationError = require('../errors/authentication-error');
var MissingCredentialsError = require('../errors/missing-credentials-error');
var Extractor = require('./extractor');
var urlJoin = require('url-join');

var PROXY_HOST = process.env.BOTFUEL_PROXY_HOST || 'https://api.botfuel.io';
var ENTITY_EXTRACTION_ROUTE = '/nlp/entity-extraction';
var ENTITY_EXTRACTION_VERSION = 'v0';

var ENTITY_EXTRACTION_API = process.env.BOTFUEL_ENTITY_EXTRACTION_API_URL || urlJoin(PROXY_HOST, ENTITY_EXTRACTION_ROUTE, ENTITY_EXTRACTION_VERSION);

/**
 * Entity extraction web service based extractor.
 */

var WsExtractor = function (_Extractor) {
  _inherits(WsExtractor, _Extractor);

  /**
   * @constructor
   * @param {Object} parameters - the extractor parameters
   */
  function WsExtractor(parameters) {
    _classCallCheck(this, WsExtractor);

    var _this = _possibleConstructorReturn(this, (WsExtractor.__proto__ || Object.getPrototypeOf(WsExtractor)).call(this, parameters));

    _this.cleanParameters = function (params) {
      return Object.keys(params).reduce(function (returns, element) {
        if (params[element] !== undefined) {
          return _extends({}, returns, _defineProperty({}, element, params[element]));
        }
        return returns;
      }, {});
    };

    if (!process.env.BOTFUEL_APP_ID || !process.env.BOTFUEL_APP_KEY) {
      throw new MissingCredentialsError('BOTFUEL_APP_ID and BOTFUEL_APP_KEY are required for using the entity extraction service.');
    }
    return _this;
  }

  _createClass(WsExtractor, [{
    key: 'compute',


    /** @inheritDoc */
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sentence) {
        var query;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('compute', sentence);
                query = clone(this.parameters);

                extend(query, { sentence: sentence });
                return _context.abrupt('return', this.retryComputeRequest({
                  method: 'GET',
                  uri: ENTITY_EXTRACTION_API,
                  // Needed so that arrays are serialized to foo=bar&foo=baz
                  // Instead of foo[0]=bar&foo[1]=baz
                  // (dimensions for example)
                  useQuerystring: true,
                  qs: this.cleanParameters({
                    sentence: query.sentence,
                    dimensions: query.dimensions,
                    antidimensions: query.antidimensions,
                    timezone: query.timezone,
                    case_sensitive: query.case_sensitive,
                    keep_quotes: query.keep_quotes,
                    keep_accents: query.keep_accents
                  }),
                  headers: {
                    'App-Id': process.env.BOTFUEL_APP_ID,
                    'App-Key': process.env.BOTFUEL_APP_KEY
                  },
                  rejectUnauthorized: false,
                  json: true
                }));

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function compute(_x) {
        return _ref.apply(this, arguments);
      }

      return compute;
    }()

    /**
     * Performs request with retries if the service is not available
     * @param requestOptions - Entity extraction request options
     * @param retries - Number of retries
     * @returns {Promise<*>}
     */

  }, {
    key: 'retryComputeRequest',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(requestOptions) {
        var retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
        var entities;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('retryComputeRequest', requestOptions, retries);
                _context2.prev = 1;
                _context2.next = 4;
                return (0, _requestPromiseNative2.default)(requestOptions);

              case 4:
                entities = _context2.sent;
                return _context2.abrupt('return', entities.map(function (entity) {
                  return _extends({}, entity, {
                    start: entity.start,
                    end: entity.end
                  });
                }));

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2['catch'](1);

                logger.error('Could not extract the entities!');

                if (!(_context2.t0.statusCode === 403)) {
                  _context2.next = 13;
                  break;
                }

                throw new AuthenticationError();

              case 13:
                if (!(_context2.t0.statusCode === 503 && retries > 0)) {
                  _context2.next = 15;
                  break;
                }

                return _context2.abrupt('return', this.retryComputeRequest(requestOptions, retries - 1));

              case 15:
                throw _context2.t0;

              case 16:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 8]]);
      }));

      function retryComputeRequest(_x2) {
        return _ref2.apply(this, arguments);
      }

      return retryComputeRequest;
    }()
  }]);

  return WsExtractor;
}(Extractor);

module.exports = WsExtractor;