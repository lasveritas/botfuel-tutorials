'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = require('logtown')('DialogManager');
var Resolver = require('./resolver');
var Dialog = require('./dialogs/dialog');
var DialogError = require('./errors/dialog-error');

var DEFAULT_DIALOG = {
  name: 'default',
  characteristics: {
    reentrant: false
  },
  data: {}
};

/**
 * The dialog manager turns NLU output into a dialog stack. It executes the stack and returns the
 * bot messages
 */

var DialogManager = function (_Resolver) {
  _inherits(DialogManager, _Resolver);

  function DialogManager(bot) {
    _classCallCheck(this, DialogManager);

    var brain = bot.brain,
        config = bot.config;

    var _this = _possibleConstructorReturn(this, (DialogManager.__proto__ || Object.getPrototypeOf(DialogManager)).call(this, config, 'dialog'));

    _this.bot = bot;
    _this.brain = brain;
    _this.adapterName = config.adapter.name;
    return _this;
  }

  _createClass(DialogManager, [{
    key: 'getFilenames',
    value: function getFilenames(name) {
      return [name + '-' + this.kind + '.' + this.adapterName + '.js', name + '-' + this.kind + '.js'];
    }
  }, {
    key: 'resolutionSucceeded',
    value: function resolutionSucceeded(Resolved) {
      return new Resolved(this.bot, Resolved.params);
    }

    /**
     * Returns the last "reentrant" dialog to execute if no other dialog is found.
     * When the sentence itself does not contain enough information for the DialogManager
     * to compute a dialog, the DialogManager recalls the first reentrant dialog from the
     * stack of previous dialogs.
     */

  }, {
    key: 'getLastReentrantDialog',
    value: function getLastReentrantDialog(previousDialogs) {
      var _this2 = this;

      logger.debug('getLastReentrantDialog', { previousDialogs: previousDialogs });
      return previousDialogs.slice(0).reverse().find(function (dialog) {
        return _this2.resolve(dialog.name).characteristics.reentrant;
      }) || null;
    }
  }, {
    key: 'getLastDialog',
    value: function getLastDialog(dialogs) {
      return dialogs.stack.length > 0 ? dialogs.stack[dialogs.stack.length - 1] : null;
    }

    /**
     * Returns the dialogs data (stack and previous dialogs).
     */

  }, {
    key: 'getDialogs',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userId) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                logger.debug('getDialogs', { userId: userId });
                return _context.abrupt('return', this.brain.getDialogs(userId));

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getDialogs(_x) {
        return _ref.apply(this, arguments);
      }

      return getDialogs;
    }()

    /**
     * Sets the dialogs data (stack and previous dialogs).
     */

  }, {
    key: 'setDialogs',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userId, dialogs) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                logger.debug('setDialogs', { userId: userId, dialogs: dialogs });
                _context2.next = 3;
                return this.brain.setDialogs(userId, dialogs);

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setDialogs(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return setDialogs;
    }()

    /**
     * Updates the dialogs.
     */

  }, {
    key: 'updateWithClassificationResults',
    value: function updateWithClassificationResults(userId, dialogs, classificationResults, messageEntities) {
      logger.debug('updateWithClassificationResults', { userId: userId, dialogs: dialogs, classificationResults: classificationResults, messageEntities: messageEntities });
      var newDialog = null;
      if (classificationResults.length > 1) {
        newDialog = {
          name: 'classification-disambiguation',
          data: { classificationResults: classificationResults, messageEntities: messageEntities }
        };
      } else if (classificationResults.length === 1) {
        var lastDialog = this.getLastDialog(dialogs);
        if (lastDialog && lastDialog.name === classificationResults[0].name && messageEntities.length === 0) {
          // if new intent is the same as previous with no new entity then trigger default dialog
          newDialog = DEFAULT_DIALOG;
        } else {
          newDialog = {
            name: classificationResults[0].name,
            data: classificationResults[0].isQnA() ? { answers: classificationResults[0].answers // TODO refactor (law of Demeter)
            } : { messageEntities: messageEntities }
          };
        }
      }

      if (newDialog) {
        this.updateWithDialog(dialogs, newDialog);
      } else {
        var _lastDialog = this.getLastDialog(dialogs);
        if (_lastDialog) {
          _lastDialog.data.messageEntities = messageEntities;
        }
        if (messageEntities.length === 0) {
          _lastDialog = DEFAULT_DIALOG;
          dialogs.stack.push(_lastDialog);
        }
      }

      if (dialogs.stack.length === 0) {
        // no intent detected
        var _lastDialog2 = this.getLastReentrantDialog(dialogs.previous) || DEFAULT_DIALOG;
        dialogs.stack.push(_extends({}, _lastDialog2, {
          data: { messageEntities: messageEntities } || {}
        }));
      }
    }

    /**
     * Updates the dialogs.
     * @param newDialog - new dialog to be added to the dialog stack
     */

  }, {
    key: 'updateWithDialog',
    value: function updateWithDialog(dialogs, newDialog) {
      logger.debug('updateWithDialog', { dialogs: dialogs, newDialog: newDialog });
      var lastDialog = this.getLastDialog(dialogs);
      if (lastDialog && lastDialog.name === newDialog.name) {
        lastDialog.data = newDialog.data;
      } else {
        dialogs.stack.push(newDialog);
      }
      logger.debug('updateWithDialog: updated', { dialogs: dialogs });
    }

    /**
     * Applies an action to the dialogs object.
     * @param dialogs - the dialogs object to be updated
     * @returns The new dialogs object with its stack and previous arrays updated
     */

  }, {
    key: 'applyAction',
    value: function applyAction(dialogs, action) {
      logger.debug('applyAction', { dialogs: dialogs, action: action });
      var updatedDialogs = dialogs;
      var currentDialog = dialogs.stack[dialogs.stack.length - 1];
      var date = Date.now();
      if (action.name === Dialog.ACTION_CANCEL) {
        var newDialog = action.newDialog;

        updatedDialogs = _extends({}, dialogs, {
          stack: dialogs.stack.slice(0, -2),
          previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
        });
        if (newDialog) {
          this.updateWithDialog(updatedDialogs, newDialog);
        }
        return updatedDialogs;
      } else if (action.name === Dialog.ACTION_COMPLETE) {
        return _extends({}, dialogs, {
          stack: dialogs.stack.slice(0, -1),
          previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
        });
      } else if (action.name === Dialog.ACTION_NEXT) {
        var _newDialog = action.newDialog;

        updatedDialogs = _extends({}, dialogs, {
          stack: dialogs.stack.slice(0, -1),
          previous: [].concat(_toConsumableArray(dialogs.previous), [_extends({}, currentDialog, { date: date })])
        });
        this.updateWithDialog(updatedDialogs, _newDialog);
        return updatedDialogs;
      } else if (action.name === Dialog.ACTION_NEW_CONVERSATION) {
        var _newDialog2 = action.newDialog;

        updatedDialogs = _extends({}, dialogs, {
          stack: [],
          previous: [],
          isNewConversation: true
        });
        if (_newDialog2) {
          updatedDialogs.stack.push(_newDialog2);
        }
        return updatedDialogs;
      }
      throw new DialogError({
        name: currentDialog,
        message: 'Unknown action \'' + action.name + '\' in \'' + currentDialog.name + '\''
      });
    }

    /**
     * Executes the dialogs.
     * @param botMessagesAccumulator - the bot messages from previous dialogs
     */

  }, {
    key: 'execute',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userMessage, dialogs) {
        var botMessagesAccumulator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var botMessages, dialog, confirmationDialogName, dialogInstance, executeResult, action, newBotMessages;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logger.debug('execute', { userMessage: userMessage, dialogs: dialogs, botMessagesAccumulator: botMessagesAccumulator });
                botMessages = botMessagesAccumulator;

                if (!(dialogs.stack.length === 0)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt('return', {
                  dialogs: dialogs,
                  botMessages: botMessages
                });

              case 4:
                dialog = dialogs.stack[dialogs.stack.length - 1];

                if (!dialog.blocked) {
                  _context3.next = 11;
                  break;
                }

                dialog.blocked = false;
                confirmationDialogName = this.resolve(dialog.name + '-confirmation') ? dialog.name + '-confirmation' : 'confirmation';

                dialogs.stack.push({
                  name: confirmationDialogName,
                  characteristics: {
                    reentrant: false
                  },
                  data: {}
                });
                _context3.next = 23;
                break;

              case 11:
                dialogInstance = this.resolve(dialog.name);
                // See https://github.com/facebook/flow/issues/5294

                _context3.next = 14;
                return dialogInstance.execute(userMessage, dialog.data);

              case 14:
                executeResult = _context3.sent;
                action = executeResult.action, newBotMessages = executeResult.botMessages;

                botMessages = botMessages.concat(newBotMessages);
                logger.debug('execute', { action: action });

                if (!(action.name === Dialog.ACTION_WAIT)) {
                  _context3.next = 20;
                  break;
                }

                return _context3.abrupt('return', {
                  dialogs: dialogs,
                  botMessages: botMessages
                });

              case 20:
                _context3.next = 22;
                return this.applyAction(dialogs, action);

              case 22:
                dialogs = _context3.sent;

              case 23:
                return _context3.abrupt('return', this.execute(userMessage, dialogs, botMessages));

              case 24:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function execute(_x4, _x5) {
        return _ref3.apply(this, arguments);
      }

      return execute;
    }()

    /**
     * Executes when receiving the classification results and message entities.
     */

  }, {
    key: 'executeClassificationResults',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(userMessage, classificationResults, messageEntities) {
        var userId, dialogs, _ref5, newDialogs, botMessages;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                logger.debug('executeClassificationResults', { userMessage: userMessage, classificationResults: classificationResults, messageEntities: messageEntities });
                userId = userMessage.user;
                _context4.next = 4;
                return this.getDialogs(userId);

              case 4:
                dialogs = _context4.sent;

                this.updateWithClassificationResults(userId, dialogs, classificationResults, messageEntities);
                _context4.next = 8;
                return this.execute(userMessage, dialogs);

              case 8:
                _ref5 = _context4.sent;
                newDialogs = _ref5.dialogs;
                botMessages = _ref5.botMessages;
                _context4.next = 13;
                return this.setDialogs(userId, newDialogs);

              case 13:
                return _context4.abrupt('return', botMessages);

              case 14:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function executeClassificationResults(_x7, _x8, _x9) {
        return _ref4.apply(this, arguments);
      }

      return executeClassificationResults;
    }()

    /**
     * Populates and executes the stack.
     */

  }, {
    key: 'executeDialog',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(userMessage, newDialog) {
        var userId, dialogs, _ref7, newDialogs, botMessages;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                logger.debug('executeDialog', { userMessage: userMessage, newDialog: newDialog });
                userId = userMessage.user;
                _context5.next = 4;
                return this.getDialogs(userId);

              case 4:
                dialogs = _context5.sent;

                this.updateWithDialog(dialogs, newDialog);
                _context5.next = 8;
                return this.execute(userMessage, dialogs);

              case 8:
                _ref7 = _context5.sent;
                newDialogs = _ref7.dialogs;
                botMessages = _ref7.botMessages;
                _context5.next = 13;
                return this.setDialogs(userId, newDialogs);

              case 13:
                return _context5.abrupt('return', botMessages);

              case 14:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function executeDialog(_x10, _x11) {
        return _ref6.apply(this, arguments);
      }

      return executeDialog;
    }()
  }]);

  return DialogManager;
}(Resolver);

module.exports = DialogManager;